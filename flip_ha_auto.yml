---
# flip_ha_auto.yml - Automatically detect and flip active/passive Palo Alto firewalls
#
# Description
# ===========
# This playbook automatically detects the active member in a Palo Alto HA pair
# and flips the HA state by suspending the active device and waiting for
# the passive to become active.
#
# Usage
# =====
# Example:
#   ansible-playbook -i inventory flip_ha_auto.yml --extra-vars "target=ha_pair username=admin password=changeme"
#
# Required Variables:
#   target: Target host group (e.g., ha_pair)
#   username, password or api_key
#
# Notes
# =====
# - HA preemption must be disabled
# - Assumes both HA peers are reachable

#- hosts: "{{ target | default('ha_pair') }}"
- hosts: localhost
  connection: local
  gather_facts: false

  tasks:

    - name: Determine which firewall is active in HA
      paloaltonetworks.panos.panos_active_in_ha:
        ip_address: "{{ item }}"
        username: "{{ username | default(omit) }}"
        password: "{{ password | default(omit) }}"
      loop:
        - "{{ primary_ip_address }}"
        - "{{ secondary_ip_address }}"
      register: ha_status

    - name: Set active/passive devices dynamically
      set_fact:
        active_fw: "{{ (ha_status.results | selectattr('response.active', 'equalto', true) | list | first).item }}"
        passive_fw: "{{ (ha_status.results | selectattr('response.active', 'equalto', false) | list | first).item }}"
      when: ha_status.results | length > 0
      ignore_errors: true

    - name: Fail if no active firewall was detected
      fail:
        msg: "Could not detect active/passive nodes. Check credentials or HA connectivity."
      when: active_fw is not defined

    - name: Show which firewall is active/passive
      debug:
        msg:
          - "Active Firewall IP: {{ active_fw }}"
          - "Passive Firewall IP: {{ passive_fw }}"

    - name: Check HA sync on passive
      paloaltonetworks.panos.panos_op:
        provider:
          ip_address: "{{ passive_fw }}"
          username: "{{ username }}"
          password: "{{ password }}"
        cmd: "show high-availability state"
      register: passive_state_sync
      retries: 10
      delay: 30
      until: >
        (passive_state_sync.stdout | from_json).response.result.group["local-info"].state == 'passive'
        and (passive_state_sync.stdout | from_json).response.result.group["local-info"]["state-sync"] == 'Complete'

    - name: Suspend active device to trigger failover
      paloaltonetworks.panos.panos_op:
        provider:
          ip_address: "{{ active_fw }}"
          username: "{{ username }}"
          password: "{{ password }}"
        cmd: "request high-availability state suspend"

    - name: Pause for HA switchover
      pause:
        seconds: 10

    - name: Restore original active device to functional state
      paloaltonetworks.panos.panos_op:
        provider:
          ip_address: "{{ active_fw }}"
          username: "{{ username }}"
          password: "{{ password }}"
        cmd: "request high-availability state functional"

    - name: Verify that former passive is now active
      paloaltonetworks.panos.panos_op:
        provider:
          ip_address: "{{ passive_fw }}"
          username: "{{ username }}"
          password: "{{ password }}"
        cmd: "show high-availability state"
      register: post_failover
      retries: 10
      delay: 30
      until: >
        (post_failover.stdout | from_json).response.result.group["local-info"].state == 'active'

    - name: Display final HA roles
      debug:
        msg:
          - "Failover complete."
          - "Firewall {{ passive_fw }} is now ACTIVE."
          - "Firewall {{ active_fw }} has been restored to FUNCTIONAL state."
