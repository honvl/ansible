- name: Check for free Cisco switch interfaces
  hosts: all
  gather_facts: false
   
  vars:
    output_path: "/home/ansiblereports/"
    filename: "free_interfaces_{{ date }}.csv"
    filename2: "free_interfaces2_{{ date }}.csv"
    filename3: "free_interfaces3_{{ date }}.csv"
    filenamevlan: "free_interfacesvlan_{{ date }}.csv"
    temp_path: "/home/ansiblereports/temp.csv"
    full_path: "/home/ansiblereports/free_interfaces_{{ date }}.csv"

  tasks:

    - name: CSV - Generate output filename
      set_fact: 
        date="{{lookup('pipe','date +%Y%m%d')}}"
      run_once: true

    - name: Delete old content
      ansible.builtin.file:
        state: absent
        path: "{{ output_path }}/{{ filename }}"

    - name: Delete old content2
      ansible.builtin.file:
        state: absent
        path: "{{ output_path }}/{{ filename2 }}"

    - name: Delete old contentvlan
      ansible.builtin.file:
        state: absent
        path: "{{ output_path }}/{{ filenamevlan }}"                 

    - name: CSV - Create file and set the header
      lineinfile:
        dest: "{{ output_path }}/{{ filename }}"
        line: hostname,interface,description,lineprotocol,operstatus
        create: yes
        state: present

    - name: CSV - Create vlan file and set the header
      lineinfile:
        dest: "{{ output_path }}/{{ filenamevlan }}"
        line: hostname,interface,accessvlan,voicevlan,mode
        create: yes
        state: present        

    - name: IOS Facts
      cisco.ios.ios_facts:
        gather_network_resources: l2_interfaces
        gather_subset: all
      register: fact
    
    - name: CSV - Write information into .csv file
      lineinfile:
        insertafter: EOF
        dest: "{{ output_path }}/{{ filename }}"
        line: "{{ fact['ansible_facts'].ansible_net_hostname }},{{ item.key }},{{ item.value.description | default('') }},{{ item.value.lineprotocol }},{{ item.value.operstatus }}"
      loop: "{{ fact['ansible_facts']['ansible_net_interfaces'] | dict2items }}"
      when: item.value.lineprotocol == "down"
      loop_control:
        loop_var: item

    - name: CSV - Write vlan information into .csv file
      lineinfile:
        insertafter: EOF
        dest: "{{ output_path }}/{{ filenamevlan }}"
        line: "{{ fact['ansible_facts'].ansible_net_hostname }},{{ item.name }},{{ item.access.vlan }},{{ item.voice.vlan  | default('') }},{{ item.mode }}"
      loop: "{{ fact['ansible_facts']['ansible_network_resources'].l2_interfaces }}"
      loop_control:
        loop_var: item


    - name: show int counters
      cisco.ios.ios_command:
        commands: show int counters
      register: counters_output

    - name: Write counters into file2
      local_action: copy content="{{ counters_output.stdout[0] }}" dest="{{ output_path }}/{{ filename2 }}"

    - name: Replace old Te interface name with abbreviated interface name
      ansible.builtin.replace:
        path: "{{ output_path }}/{{ filename }}"
        regexp: 'TenGigabitEthernet'
        replace: 'Te'    
      ansible.builtin.replace:
        path: "{{ output_path }}/{{ filenamevlan }}"
        regexp: 'TenGigabitEthernet'
        replace: 'Te'            

    - name: Replace old Gi interface name with abbreviated interface name
      ansible.builtin.replace:
        path: "{{ output_path }}/{{ filename }}"
        regexp: 'GigabitEthernet'
        replace: 'Gi'    
      ansible.builtin.replace:
        path: "{{ output_path }}/{{ filenamevlan }}"
        regexp: 'GigabitEthernet'
        replace: 'Gi'          

    - name: Replace more than one whitespace with commas to make csv
      ansible.builtin.replace:
        path: "{{ output_path }}/{{ filename2 }}"
        regexp: '[ ]{2,}'
        replace: ',' 

    - name: Delete OutBytes counters
      ansible.builtin.replace:
        path: "{{ output_path }}/{{ filename2 }}"
        regexp: '(?s)Port,OutBytes.*'
        replace: '' 

    - name: Rename Port column to interface
      ansible.builtin.replace:
        path: "{{ output_path }}/{{ filename2 }}"
        regexp: 'Port'
        replace: 'interface'         

    - name: Python code for inner join of the two CSVs
      command: python
      args:
        stdin: |
          import pandas as pd
            
          # reading two csv files
          data1 = pd.read_csv('{{ output_path }}/{{ filename }}')
          data2 = pd.read_csv('{{ output_path }}/{{ filename2 }}')
            
          # using merge function by setting how='inner'
          output1 = pd.merge(data2, data1, 
                            on='interface', 
                            how='inner')

          # find interfaces with 0 Bytes
          df = output1[output1['InBytes'] == 0]

          df = df.drop(columns=['InUcastPkts','InMcastPkts','InBcastPkts'])

          column_to_move = df.pop("InBytes")
          df.insert(len(df.columns), "InBytes", column_to_move )

          df.set_index('interface')

          # displaying result
          print(df)

          df.to_csv('{{ output_path }}/{{ filename3 }}', index = False)