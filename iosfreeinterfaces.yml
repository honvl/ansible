- name: Check for free Cisco switch interfaces
  hosts: all
  gather_facts: false
   
  vars:
    output_path: "/home/ansiblereports/"
    filename: "{{ switch }}_free_interfaces_{{ date }}.csv"
    filename2: "{{ switch }}_free_interfaces2_{{ date }}.csv"
    filename3: "{{ switch }}_free_interfaces3_{{ date }}.csv"
    filename4: "{{ switch }}_free_interfaces4_{{ date }}.csv"
    filenamevlan: "{{ switch }}_free_interfacesvlan_{{ date }}.csv"
    temp_path: "/home/ansiblereports/temp.csv"
    full_path: "/home/ansiblereports/free_interfaces_{{ date }}.csv"

  tasks:

    - name: CSV - Generate output filename
      set_fact: 
        date="{{lookup('pipe','date +%Y%m%d')}}"
      run_once: true            

    - name: IOS Facts
      cisco.ios.ios_facts:
        gather_network_resources: l2_interfaces
        gather_subset: all
      register: fact

    - name: CSV - Generate output filename2
      set_fact:
        switch="{{ fact['ansible_facts'].ansible_net_hostname }}"

    - name: Delete old content
      ansible.builtin.file:
        state: absent
        path: "{{ output_path }}/{{ filename }}"

    - name: Delete old content2
      ansible.builtin.file:
        state: absent
        path: "{{ output_path }}/{{ filename2 }}"

    - name: Delete old contentvlan
      ansible.builtin.file:
        state: absent
        path: "{{ output_path }}/{{ filenamevlan }}"         

    - name: CSV - Create file and set the header
      lineinfile:
        dest: "{{ output_path }}/{{ filename }}"
        line: hostname,interface,description,lineprotocol,operstatus
        create: yes
        state: present

    - name: CSV - Create vlan file and set the header
      lineinfile:
        dest: "{{ output_path }}/{{ filenamevlan }}"
        line: interface,accessvlan,voicevlan,mode
        create: yes
        state: present        

    - name: CSV - Write information into .csv file
      lineinfile:
        insertafter: EOF
        dest: "{{ output_path }}/{{ filename }}"
        line: "{{ fact['ansible_facts'].ansible_net_hostname }},{{ item.key }},{{ item.value.description | replace(',','') | default('') }},{{ item.value.lineprotocol }},{{ item.value.operstatus }}"
      loop: "{{ fact['ansible_facts']['ansible_net_interfaces'] | dict2items }}"
      when: item.value.lineprotocol == "down"
      loop_control:
        loop_var: item

    - name: CSV - Write vlan information into vlan .csv file
      lineinfile:
        insertafter: EOF
        dest: "{{ output_path }}/{{ filenamevlan }}"
        line: "{{ item.name }},{{ item.access.vlan | default('') }},{{ item.voice.vlan  | default('') }},{{ item.mode | default('')}}"
      loop: "{{ fact['ansible_facts']['ansible_network_resources'].l2_interfaces }}"
      loop_control:
        loop_var: item


    - name: show int counters
      cisco.ios.ios_command:
        commands: show int counters
      register: counters_output

    - name: Write counters into file2
      local_action: copy content="{{ counters_output.stdout[0] }}" dest="{{ output_path }}/{{ filename2 }}"

    - name: Replace old Te interface name with abbreviated interface name in CSV
      ansible.builtin.replace:
        path: "{{ output_path }}/{{ filename }}"
        regexp: 'TenGigabitEthernet'
        replace: 'Te'    
    - name: Replace old Te interface name with abbreviated interface name in vlan CSV       
      ansible.builtin.replace:
        path: "{{ output_path }}/{{ filenamevlan }}"
        regexp: 'TenGigabitEthernet'
        replace: 'Te'            

    - name: Replace old Gi interface name with abbreviated interface name in CSV
      ansible.builtin.replace:
        path: "{{ output_path }}/{{ filename }}"
        regexp: 'GigabitEthernet'
        replace: 'Gi'    
    - name: Replace old Gi interface name with abbreviated interface name in vlan CSV        
      ansible.builtin.replace:
        path: "{{ output_path }}/{{ filenamevlan }}"
        regexp: 'GigabitEthernet'
        replace: 'Gi'          

    - name: Replace more than one whitespace with commas to make counters csv with file2
      ansible.builtin.replace:
        path: "{{ output_path }}/{{ filename2 }}"
        regexp: '[ ]{2,}'
        replace: ',' 

    - name: Replace InOctets with InBytes
      ansible.builtin.replace:
        path: "{{ output_path }}/{{ filename2 }}"
        regexp: 'InOctets'
        replace: 'InBytes'      

    - name: Replace OutOctets with OutBytes
      ansible.builtin.replace:
        path: "{{ output_path }}/{{ filename2 }}"
        regexp: 'OutOctets'
        replace: 'OutBytes'  

    - name: Delete OutBytes counters in file2
      ansible.builtin.replace:
        path: "{{ output_path }}/{{ filename2 }}"
        regexp: '(?s)Port,OutBytes.*'
        replace: '' 

    - name: Rename Port column to interface in file2
      ansible.builtin.replace:
        path: "{{ output_path }}/{{ filename2 }}"
        regexp: 'Port'
        replace: 'interface'         

    - name: Python code for inner join of the CSVs
      ansible.builtin.script: iosfreeinterfaces.py
      ansible_python_interpreter: /var/lib/awx/venv/ansible/bin/python
      args:
        executable: python3
      delegate_to: localhost

    - name: Register output file to variable
      set_fact:
        file_to_email: "{{ output_path }}/{{ filename4 }}"

    - name: Gather output files to list
      set_fact:
        files_to_email: "{{ hostvars|json_query('*.file_to_email') | sort }}"
      run_once: true
      delegate_to: localhost
      delegate_facts: true

    - name: Send mail with attachments
      local_action:
        module: mail    
        host: outlook.dpw.com
        port: 25
        from: networking@davispolk.com
        to:
        - hardware_staff@davispolk.com
        - networking@davispolk.com
        - robert.connolly@davispolk.com
        - john.wong@davispolk.com
        - av@davispolk.com
        subject: Available switchports report for NY
        body: |
              Hello,
              
              Attached is a spreadsheet for each switch that contain available switchports that can be reused.
              Please reply all to the e-mail if a port is reused and provide the switch name and interface number - to prevent conflicts and to allow us to update the port description.

              Ports in VLAN 666 are guest ports and have internet access only.
              Ports in VLAN 151 are for Amino IPTV boxes.
              Ports in VLAN "floor number" are standard ports - for example, VLAN 8 on floor 8.
              Ports in VLAN "floor number" + "5" are AV ports - for example, VLAN 85 on floor 8.
              Ports without a voice VLAN will not support phones that are plugged in. 
              Ports that have operational status "administratively down" will not come up even if something is plugged in.
              Ports in modes other than "access" should not be used.

              Best,
              Honver
        attach: "{{ hostvars['localhost'].files_to_email }}"
      run_once: True
