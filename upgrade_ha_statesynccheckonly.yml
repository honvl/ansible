---
# upgrade_ha.yml - PAN-OS HA pair upgrade playbook.
#
# Description
# ===========
#
# Upgrades a PAN-OS HA pair to the specified version.  Upgrade must be a single step (i.e. 8.1.7 to 8.1.12).  For major
# version upgrades requiring a base image to be downloaded to the device prior to performing the upgrade, see the 
# 'download_panos_image.yml' playbook.
#
# This playbook requires connection details for the two members of the HA pair to be specified in the variables 
# 'primary_ip_address', 'secondary_ip_address', 'username', and 'password'.  These may be defined as host variables
# (see `host_vars/ha_pair.yml` for an example) or extra vars.
#
# Usage
# =====
#
# Required variables:
#
#   target: Target HA pair.  See `host_vars/ha_pair.yml` for sample definition of host variables.
#
#   version: Version to install.
#
# See the VARS section of the playbook for additional customization options.
#
# Default run:
#
#  $ ansible-playbook -i inventory upgrade_ha.yml --extra-vars "target=ha_pair version=9.0.3-h3"
#
# Notes
# =====
#
# HA pairs with preemption enabled are not supported by this playbook.

- hosts: '{{ target | default("ha_pair") }}'
  connection: local

  vars:
    primary:
      ip_address: '{{ primary_ip_address }}'
      username: '{{ username | default(omit) }}'
      password: '{{ password | default(omit) }}'
      api_key: '{{ api_key | default(omit) }}'

    secondary:
      ip_address: '{{ secondary_ip_address }}'
      username: '{{ username | default(omit) }}'
      password: '{{ password | default(omit) }}'
      api_key: '{{ api_key | default(omit) }}'

    # backup_config - Create a backup of the currently running config before upgrading on both devices.
    backup_config: true

    # backup_filename - Filename for running config backup.
    backup_filename: 'ansible-backup-{{ ansible_date_time.date }}.xml'

    # pause_mid_upgrade - Optionally pause for additional verification during upgrade.  This playbook will perform
    #                     basic checks for HA status and session sync, but this will wait for manual verification before
    #                     upgrading the secondary firewall.
    pause_mid_upgrade: False

  tasks:
#    - name: State sync check not empty
#      paloaltonetworks.panos.panos_op:
#        provider: '{{ primary }}'
#        cmd: 'show high-availability state'
#      register: primary_state_sync
#      retries: 10
#      delay: 30
#      until: primary_state_sync.stdout is defined


    - name: State sync check (primary)
      paloaltonetworks.panos.panos_op:
        provider: '{{ primary }}'
        cmd: 'show high-availability state'
      register: primary_state_sync
      retries: 10
      delay: 30
      until: >
        primary_state_sync.stdout is defined and
        (
          (primary_state_sync.stdout | from_json).response.result.group["local-info"].state == 'passive' and
          (primary_state_sync.stdout | from_json).response.result.group["local-info"]["state-sync"] == 'Complete'
        )
